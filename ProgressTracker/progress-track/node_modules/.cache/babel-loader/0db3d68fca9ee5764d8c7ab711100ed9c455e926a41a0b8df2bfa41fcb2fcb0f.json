{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alaan\\\\source\\\\repos\\\\ASharif23\\\\MacroMaster\\\\ProgressTracker\\\\progress-tracker\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getUserProgress, updateUserProgress } from './api';\nimport ProgressChart from './components/ProgressChart';\nimport ProgressForm from './components/ProgressForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [progressData, setProgressData] = useState([]);\n  useEffect(() => {\n    const userId = 'user-id'; // Replace with actual user ID\n    getUserProgress(userId).then(response => {\n      setProgressData(response.data);\n    }).catch(error => {\n      console.error('Error fetching progress data:', error);\n    });\n  }, []);\n\n  // Prepare chart data based on progressData\n  const chartData = {\n    labels: progressData.map(entry => entry.date),\n    // Make sure 'date' is in your data\n    datasets: [{\n      label: 'Weight Progress',\n      data: progressData.map(entry => entry.currentWeight),\n      // Replace 'currentWeight' if your field is named differently\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  const handleProgressUpdate = weight => {\n    // Update progress logic here\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ProgressChart, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressForm, {\n      onSubmit: handleProgressUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HRGEHVg3lUFKad2Ryw5s3BGVtOk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","getUserProgress","updateUserProgress","ProgressChart","ProgressForm","jsxDEV","_jsxDEV","App","_s","progressData","setProgressData","userId","then","response","data","catch","error","console","chartData","labels","map","entry","date","datasets","label","currentWeight","fill","borderColor","tension","handleProgressUpdate","weight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/alaan/source/repos/ASharif23/MacroMaster/ProgressTracker/progress-tracker/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getUserProgress, updateUserProgress } from './api';\nimport ProgressChart from './components/ProgressChart';\nimport ProgressForm from './components/ProgressForm';\n\nfunction App() {\n  const [progressData, setProgressData] = useState([]);\n\n  useEffect(() => {\n    const userId = 'user-id'; // Replace with actual user ID\n    getUserProgress(userId)\n      .then((response) => {\n        setProgressData(response.data);\n      })\n      .catch((error) => {\n        console.error('Error fetching progress data:', error);\n      });\n  }, []);\n\n  // Prepare chart data based on progressData\n  const chartData = {\n    labels: progressData.map(entry => entry.date), // Make sure 'date' is in your data\n    datasets: [\n      {\n        label: 'Weight Progress',\n        data: progressData.map(entry => entry.currentWeight), // Replace 'currentWeight' if your field is named differently\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }\n    ]\n  };\n\n  const handleProgressUpdate = (weight) => {\n    // Update progress logic here\n  };\n\n  return (\n    <div className=\"App\">\n      <ProgressChart data={chartData} />\n      <ProgressForm onSubmit={handleProgressUpdate} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,eAAe,EAAEC,kBAAkB,QAAQ,OAAO;AAC3D,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,YAAY,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd,MAAMY,MAAM,GAAG,SAAS,CAAC,CAAC;IAC1BV,eAAe,CAACU,MAAM,CAAC,CACpBC,IAAI,CAAEC,QAAQ,IAAK;MAClBH,eAAe,CAACG,QAAQ,CAACC,IAAI,CAAC;IAChC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,SAAS,GAAG;IAChBC,MAAM,EAAEV,YAAY,CAACW,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;IAAE;IAC/CC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,iBAAiB;MACxBV,IAAI,EAAEL,YAAY,CAACW,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACI,aAAa,CAAC;MAAE;MACtDC,IAAI,EAAE,KAAK;MACXC,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC;EAED,MAAMC,oBAAoB,GAAIC,MAAM,IAAK;IACvC;EAAA,CACD;EAED,oBACExB,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB1B,OAAA,CAACH,aAAa;MAACW,IAAI,EAAEI;IAAU;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClC9B,OAAA,CAACF,YAAY;MAACiC,QAAQ,EAAER;IAAqB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV;AAAC5B,EAAA,CAtCQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}