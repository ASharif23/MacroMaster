{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alaan\\\\source\\\\repos\\\\ASharif23\\\\MacroMaster\\\\ProgressTracker\\\\progress-track\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getUserProgress, updateUserProgress } from './api';\nimport ProgressChart from './components/ProgressChart';\nimport ProgressForm from './components/ProgressForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [progressData, setProgressData] = useState([]);\n  const userId = 'user-id'; // Replace with actual user ID, or fetch from user context or session\n\n  useEffect(() => {\n    getUserProgress(userId).then(response => {\n      setProgressData(response.data);\n    }).catch(error => {\n      console.error('Error fetching progress data:', error);\n    });\n  }, [userId]);\n  const handleProgressUpdate = newWeight => {\n    const updatedData = {\n      currentWeight: newWeight\n      // Add any other fields that need to be updated\n    };\n    updateUserProgress(userId, updatedData).then(response => {\n      // Update the local state to reflect the new data\n      setProgressData(prevData => ({\n        ...prevData,\n        currentWeight: response.data.currentWeight\n        // Update other fields as necessary\n      }));\n      alert('Progress updated successfully!');\n    }).catch(error => {\n      console.error('Failed to update progress:', error);\n      alert('Failed to update progress.');\n    });\n  };\n\n  // Prepare chart data based on progressData\n  const chartData = {\n    labels: progressData.map(entry => entry.date),\n    // Ensure 'date' is in your data\n    datasets: [{\n      label: 'Weight Progress',\n      data: progressData.map(entry => entry.currentWeight),\n      // Replace 'currentWeight' if your field is named differently\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ProgressChart, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressForm, {\n      onSubmit: handleProgressUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HRGEHVg3lUFKad2Ryw5s3BGVtOk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","getUserProgress","updateUserProgress","ProgressChart","ProgressForm","jsxDEV","_jsxDEV","App","_s","progressData","setProgressData","userId","then","response","data","catch","error","console","handleProgressUpdate","newWeight","updatedData","currentWeight","prevData","alert","chartData","labels","map","entry","date","datasets","label","fill","borderColor","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/alaan/source/repos/ASharif23/MacroMaster/ProgressTracker/progress-track/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getUserProgress, updateUserProgress } from './api';\nimport ProgressChart from './components/ProgressChart';\nimport ProgressForm from './components/ProgressForm';\n\nfunction App() {\n  const [progressData, setProgressData] = useState([]);\n  const userId = 'user-id'; // Replace with actual user ID, or fetch from user context or session\n\n  useEffect(() => {\n    getUserProgress(userId)\n      .then((response) => {\n        setProgressData(response.data);\n      })\n      .catch((error) => {\n        console.error('Error fetching progress data:', error);\n      });\n  }, [userId]);\n\n  const handleProgressUpdate = (newWeight) => {\n    const updatedData = {\n      currentWeight: newWeight,\n      // Add any other fields that need to be updated\n    };\n\n    updateUserProgress(userId, updatedData)\n      .then((response) => {\n        // Update the local state to reflect the new data\n        setProgressData(prevData => ({\n          ...prevData,\n          currentWeight: response.data.currentWeight,\n          // Update other fields as necessary\n        }));\n        alert('Progress updated successfully!');\n      })\n      .catch((error) => {\n        console.error('Failed to update progress:', error);\n        alert('Failed to update progress.');\n      });\n  };\n\n  // Prepare chart data based on progressData\n  const chartData = {\n    labels: progressData.map(entry => entry.date), // Ensure 'date' is in your data\n    datasets: [\n      {\n        label: 'Weight Progress',\n        data: progressData.map(entry => entry.currentWeight), // Replace 'currentWeight' if your field is named differently\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }\n    ]\n  };\n\n  return (\n    <div className=\"App\">\n      <ProgressChart data={chartData} />\n      <ProgressForm onSubmit={handleProgressUpdate} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,eAAe,EAAEC,kBAAkB,QAAQ,OAAO;AAC3D,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,YAAY,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMW,MAAM,GAAG,SAAS,CAAC,CAAC;;EAE1BZ,SAAS,CAAC,MAAM;IACdE,eAAe,CAACU,MAAM,CAAC,CACpBC,IAAI,CAAEC,QAAQ,IAAK;MAClBH,eAAe,CAACG,QAAQ,CAACC,IAAI,CAAC;IAChC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,CAAC;EACN,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EAEZ,MAAMO,oBAAoB,GAAIC,SAAS,IAAK;IAC1C,MAAMC,WAAW,GAAG;MAClBC,aAAa,EAAEF;MACf;IACF,CAAC;IAEDjB,kBAAkB,CAACS,MAAM,EAAES,WAAW,CAAC,CACpCR,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACAH,eAAe,CAACY,QAAQ,KAAK;QAC3B,GAAGA,QAAQ;QACXD,aAAa,EAAER,QAAQ,CAACC,IAAI,CAACO;QAC7B;MACF,CAAC,CAAC,CAAC;MACHE,KAAK,CAAC,gCAAgC,CAAC;IACzC,CAAC,CAAC,CACDR,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDO,KAAK,CAAC,4BAA4B,CAAC;IACrC,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMC,SAAS,GAAG;IAChBC,MAAM,EAAEhB,YAAY,CAACiB,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;IAAE;IAC/CC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,iBAAiB;MACxBhB,IAAI,EAAEL,YAAY,CAACiB,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACN,aAAa,CAAC;MAAE;MACtDU,IAAI,EAAE,KAAK;MACXC,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC;EAED,oBACE3B,OAAA;IAAK4B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB7B,OAAA,CAACH,aAAa;MAACW,IAAI,EAAEU;IAAU;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClCjC,OAAA,CAACF,YAAY;MAACoC,QAAQ,EAAEtB;IAAqB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV;AAAC/B,EAAA,CAxDQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AA0DZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}